@page "/{id}/{name}"
@using Open_MediaServer
@using Open_MediaServer.Content
@using Open_MediaServer.Database.Schema
@using Open_MediaServer.Utils
@using SQLiteNetExtensionsAsync.Extensions
@model Open_MediaServer.Frontend.Pages.SingleContent

@{
    Layout = "_Layout.cshtml";
}

<!DOCTYPE html>

<html>
<head>
    <title>@RouteData.Values["id"] @RouteData.Values["name"]</title>
    <link rel="stylesheet" href="~/Frontend/Assets/css/SingleContent/SingleContent.css">
    <link rel="stylesheet" href="~/Frontend/Assets/font/Font.css">
    @{
        if (RouteData.Values["id"] != null && RouteData.Values["name"] != null)
        {
            string mediaId = RouteData.Values["id"].ToString();
            var media = Program.Database.MediaDatabase.FindWithChildrenAsync<DatabaseSchema.Media>(mediaId).Result;
            if (media != null)
            {
                var extension = System.IO.Path.GetExtension(RouteData.Values["name"].ToString());

                var mediaUrl = Url.Action("GetMedia", "MediaApi", new {Id = RouteData.Values["id"], Name = RouteData.Values["name"]}, Request.Scheme, Request.Host.ToUriComponent());

                <meta property="og:title" content="@media.Name"/>
                switch (ContentUtils.GetContentType(extension))
                {
                    case ContentType.Image:
                        <meta property="og:image" content="@mediaUrl"/>
                        <meta property="og:image:secure_url" content="@mediaUrl"/>
                        <meta property="og:image:type" content="@media.ContentMime"/>
                        <meta property="og:image:width" content="@media.ContentDiemsions.width"/>
                        <meta property="og:image:height" content="@media.ContentDiemsions.height"/>
                        <meta property="og:image:alt" content="@media.Name"/>
                        break;
                    case ContentType.Video:
                        <meta property="og:video" content="@mediaUrl"/>
                        <meta property="og:video:secure_url" content="@mediaUrl"/>
                        <meta property="og:video:type" content="@media.ContentMime"/>
                        <meta property="og:video:width" content="@media.ContentDiemsions.width"/>
                        <meta property="og:video:height" content="@media.ContentDiemsions.height"/>
                        break;
                }
            }
        }
    }
</head>
<body>
@{
    if (RouteData.Values["id"] != null && RouteData.Values["name"] != null)
    {
        string mediaId = RouteData.Values["id"].ToString();
        var fileName = System.IO.Path.GetFileNameWithoutExtension(RouteData.Values["name"].ToString());
        var media = Program.Database.MediaDatabase.FindAsync<DatabaseSchema.Media>(media =>
            media.Id == mediaId && media.Name == fileName).Result;
        if (media != null)
        {
            var mediaUrl = Url.Action("GetMedia", "MediaApi", new {Id = RouteData.Values["id"], Name = RouteData.Values["name"]}, Request.Scheme, Request.Host.ToUriComponent());
            switch (ContentUtils.GetContentType(media.Extension))
            {
                case ContentType.Image:
                    break;
                case ContentType.Video:
                    <div class="video-container">
                        <video height="100%" width="100%" controls="" onloadstart="this.volume=0.01">
                            <source src="@mediaUrl" type="@media.ContentMime"/>
                        </video>
                    </div>
                    break;
                case ContentType.Other:
                    break;
            }
        }
        else
        {
            @* TODO: -> *@
        }
    }
    else
    {
        <div>
            @* TODO: -> *@
            failed to find content you were looking for...
        </div>
    }
}
</body>
</html>