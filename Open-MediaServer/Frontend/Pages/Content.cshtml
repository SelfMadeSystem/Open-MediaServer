@page
@using System.Web
@using Open_MediaServer
@using Open_MediaServer.Database.Schema
@using Open_MediaServer.Utils
@using SQLiteNetExtensionsAsync.Extensions
@model Open_MediaServer.Frontend.Pages.Media

@{
    Layout = "_Layout.cshtml";
}

<!DOCTYPE html>

<html>
<head>
    <title>@Program.ConfigManager.Config.FrontendName Media - Content</title>
    <link rel="stylesheet" href="~/Frontend/Assets/css/Content/Content.css">
    <link rel="stylesheet" href="~/Frontend/Assets/font/Font.css">
    <script src="~/Frontend/Assets/js/Content/Content.js"></script>
</head>
<body>
<div class="sort-navbar">
    <a class="sort-item" onclick="updateQueryURL('name', window);">
        Name
    </a>
    <a class="sort-item" onclick="updateQueryURL('author', window);">
        Author
    </a>
    <a class="sort-item" onclick="updateQueryURL('date', window);">
        Date
    </a>
    <a class="sort-item" onclick="updateQueryURL('type', window);">
        Type
    </a>
</div>
<div class="content-container">
    @{
        var mediaList = await Program.Database.MediaDatabase.GetAllWithChildrenAsync<DatabaseSchema.Media>();
        mediaList.RemoveAll(media => media.Public == false);
        if (mediaList.Count <= 0)
        {
            <div class="main-text">
                This server has no content associated with it.
            </div>
        }
        else
        {
            if (Request.Query.Count > 0)
            {
                if (Request.Query.ContainsKey("name"))
                {
                    var nameSort = Request.Query["name"];
                    if (nameSort[0] != null)
                    {
                        if (Boolean.TryParse(nameSort[0], out bool value) && value)
                        {
                            mediaList = mediaList.OrderBy(media => media.Name).ToList();
                        }
                    }
                }

                if (Request.Query.ContainsKey("author"))
                {
                    var authorSort = Request.Query["author"];

                    if (authorSort[0] != null)
                    {
                        if (Boolean.TryParse(authorSort[0], out bool value) && value)
                        {
                            mediaList = mediaList.OrderBy(media => media.AuthorId).ToList();
                        }
                    }
                }

                if (Request.Query.ContainsKey("date"))
                {
                    var dateSort = Request.Query["date"];

                    if (dateSort[0] != null)
                    {
                        if (Boolean.TryParse(dateSort[0], out bool value) && value)
                        {
                            mediaList = mediaList.OrderBy(media => media.UploadDate).Reverse().ToList();
                        }
                    }
                }

                if (Request.Query.ContainsKey("type"))
                {
                    var typeSort = Request.Query["type"];

                    if (typeSort[0] != null)
                    {
                        if (Boolean.TryParse(typeSort[0], out bool value) && value)
                        {
                            mediaList = mediaList.OrderBy(media => media.Extension).ToList();
                        }
                    }
                }
            }

            foreach (var media in mediaList)
            {
                if (media.ThumbnailPath != null)
                {
                    <div class="content-item">
                        <a class="content-href" href="/@media.Id/@media.Name@media.Extension">
                            <img class="content-item-thumbnail" src="@Url.Action("GetThumbnail", "MediaApi", new {Id = media.Id, Name = media.Name}, Request.Scheme, Request.Host.ToUriComponent() + ":" + (Request.Scheme.Equals("https", StringComparison.OrdinalIgnoreCase) ? Program.ConfigManager.Config.BackendPorts.https : Program.ConfigManager.Config.BackendPorts.http)) " alt="@media.Name"/>
                            <div class="content-item-text">
                                @media.Name@media.Extension<br/>
                                @media.UploadDate.ToString("MM/dd/yy HH:mm")<br/>
                                Size: @StringUtils.FormatBytesWithIdentifier(media.ContentSize)<br/>
                                Public: @media.Public<br/>
                            </div>
                        </a>
                    </div>
                }
                else
                {
                    <div class="content-item">
                        <a class="content-href" href="/@media.Id/@media.Name@media.Extension">
                            <div class="content-item-no-thumbnail">
                                No Thumbnail
                            </div>
                            <div class="content-item-text">
                                @media.Name@media.Extension<br/>
                                @media.UploadDate.ToString("MM/dd/yy HH:mm")<br/>
                                Size: @StringUtils.FormatBytesWithIdentifier(media.ContentSize)<br/>
                                Public: @media.Public<br/>
                            </div>
                        </a>
                    </div>
                }
            }

            @* foreach (var media in mediaList) *@
            @* { *@
            @*     var author = await Program.Database.UserDatabase.GetAsync<DatabaseSchema.User>(user => user.Id == media.AuthorId); *@
            @*     if (media.ThumbnailPath != null) *@
            @*     { *@
            @*         <a class="content-item" href="/@media.Id/@media.Name@media.Extension"> *@
            @*             <div> *@
            @*                 <img src="@Url.Action("GetThumbnail", "MediaApi", new {Id = media.Id, Name = media.Name}, Request.Scheme, Request.Host.ToUriComponent() + ":" + (Request.Scheme.Equals("https", StringComparison.OrdinalIgnoreCase) ? Program.ConfigManager.Config.BackendPorts.https : Program.ConfigManager.Config.BackendPorts.http))" alt="@media.Name" class="content-item-thumbnail"/> *@
            @*                 <div class="content-item-text"> *@
            @*                     @media.Name.FirstCharToUpper()@media.Extension<br/> *@
            @*                     @media.UploadDate.ToString("MM/dd/yy hh:mm")<br/> *@
            @*                     @StringUtils.FormatBytesWithIdentifier(media.ContentSize)<br/> *@
            @*                     @author.Username.FirstCharToUpper()<br/> *@
            @*                 </div> *@
            @*             </div> *@
            @*         </a> *@
            @*     } *@
            @*     else *@
            @*     { *@
            @*         <a class="content-item" href="/@media.Id/@media.Name@media.Extension"> *@
            @*             <div> *@
            @*                 <div class="content-item-no-thumbnail"> *@
            @*                     No thumbnail .-. *@
            @*                 </div> *@
            @*                 <div class="content-item-text"> *@
            @*                     @media.Name.FirstCharToUpper()@media.Extension<br/> *@
            @*                     @media.UploadDate.ToString("MM/dd/yy hh:mm")<br/> *@
            @*                     @StringUtils.FormatBytesWithIdentifier(media.ContentSize)<br/> *@
            @*                     @author.Username.FirstCharToUpper()<br/> *@
            @*                 </div> *@
            @*             </div> *@
            @*         </a> *@
            @*     } *@
            @* } *@
        }
    }
</div>
</body>
</html>